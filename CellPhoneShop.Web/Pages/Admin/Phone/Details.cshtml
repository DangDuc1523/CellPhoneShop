@page "/Admin/Phone/Details/{id:int}"
@model CellPhoneShop.Web.Pages.Admin.Phone.DetailsModel
@{
    ViewData["Title"] = $"Phone Details - {Model.Phone?.PhoneName}";
    Layout = "_AdminLayout";
    var isAdmin = User.IsInRole("Admin");
}

<div class="container-fluid mt-4">
    <!-- Back Button -->
    <div class="row mb-3">
        <div class="col-12">
            <a href="/Admin/Phone" class="btn btn-outline-secondary">
                <i class="bi bi-arrow-left"></i> Back to Phone List
            </a>
        </div>
    </div>

    @if (!string.IsNullOrEmpty(Model.SuccessMessage))
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            @Model.SuccessMessage
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    @if (!string.IsNullOrEmpty(Model.ErrorMessage))
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            @Model.ErrorMessage
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    <!-- Phone Information Section -->
    <div class="card mb-4">
        <div class="card-header">
            <div class="d-flex justify-content-between align-items-center">
                <h5 class="mb-0">Phone Information</h5>
                @if (isAdmin)
                {
                    <a href="/Admin/Phone/Edit/@Model.Phone.PhoneId" class="btn btn-sm btn-primary">
                        <i class="bi bi-pencil"></i> Edit Phone
                    </a>
                }
            </div>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-md-6">
                    <table class="table table-borderless">
                        <tr>
                            <td><strong>Phone Name:</strong></td>
                            <td>@Model.Phone.PhoneName</td>
                        </tr>
                        <tr>
                            <td><strong>Brand:</strong></td>
                            <td>@Model.Phone.BrandName</td>
                        </tr>
                        <tr>
                            <td><strong>Base Price:</strong></td>
                            <td>$@Model.Phone.BasePrice.ToString("N2")</td>
                        </tr>
                        <tr>
                            <td><strong>Created At:</strong></td>
                            <td>@Model.Phone.CreatedAt?.ToString("MM/dd/yyyy HH:mm")</td>
                        </tr>
                    </table>
                </div>
                <div class="col-md-6">
                    <h6>Description:</h6>
                    <p>@(Model.Phone.Description ?? "No description available")</p>
                    
                    @if (Model.Phone.AttributeMappings?.Any() == true)
                    {
                        <h6>Phone Attributes:</h6>
                        <div class="table-responsive">
                            <table class="table table-sm table-striped">
                                <tbody>
                                    @foreach (var attr in Model.Phone.AttributeMappings)
                                    {
                                        <tr>
                                            <td><strong>@attr.AttributeName:</strong></td>
                                            <td>@attr.Value</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    <!-- Color Management Section -->
    <div class="card mb-4">
        <div class="card-header">
            <div class="d-flex justify-content-between align-items-center">
                <h5 class="mb-0">Color Management</h5>
                <div>
                    @if (isAdmin)
                    {
                        <button type="button" class="btn btn-sm btn-outline-info me-2" onclick="debugAuth()">
                            <i class="bi bi-bug"></i> Debug Auth
                        </button>
                        <button type="button" class="btn btn-sm btn-outline-warning me-2" onclick="testApi()">
                            <i class="bi bi-cloud-arrow-up"></i> Test API
                        </button>
                        <button type="button" class="btn btn-sm btn-outline-secondary me-2" onclick="checkPhone(@ViewContext.RouteData.Values["id"])">
                            <i class="bi bi-search"></i> Check Phone
                        </button>
                        <button type="button" class="btn btn-sm btn-outline-primary me-2" onclick="testMapping()">
                            <i class="bi bi-link-45deg"></i> Test Mapping
                        </button>
                        <button type="button" class="btn btn-sm btn-outline-success me-2" onclick="debugAttributes()">
                            <i class="bi bi-list-check"></i> Debug Attributes
                        </button>
                        <button type="button" class="btn btn-sm btn-warning me-2" onclick="debugAttributes()">
                            <i class="bi bi-bug-fill"></i> Full Attribute Debug
                        </button>
                        <button type="button" class="btn btn-sm btn-info me-2" onclick="simpleCheck()">
                            <i class="bi bi-clipboard-check"></i> Quick Check
                        </button>
                        <button type="button" class="btn btn-sm btn-primary me-2" onclick="checkValues()">
                            <i class="bi bi-list-ul"></i> Check Values
                        </button>
                        <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addColorModal">
                            <i class="bi bi-plus"></i> Add Color
                        </button>
                    }
                </div>
            </div>
        </div>
        <div class="card-body">
            @if (Model.Colors?.Any() == true)
            {
                <div class="row">
                    @foreach (var color in Model.Colors)
                    {
                        <div class="col-md-4 mb-3">
                            <div class="card">
                                <img src="@color.ImageUrl" class="card-img-top" alt="@color.ColorName" style="height: 200px; object-fit: cover;">
                                <div class="card-body text-center">
                                    <h6 class="card-title">@color.ColorName</h6>
                                    @if (isAdmin)
                                    {
                                        <div class="btn-group" role="group">
                                            <button type="button" class="btn btn-sm btn-outline-primary">
                                                <i class="bi bi-pencil"></i>
                                            </button>
                                            <button type="button" class="btn btn-sm btn-outline-danger" onclick="deleteColor(@color.ColorId)">
                                                <i class="bi bi-trash"></i>
                                            </button>
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
            else
            {
                <div class="text-center py-4 text-muted">
                    <i class="bi bi-palette" style="font-size: 2rem;"></i>
                    <p class="mt-2">No colors added yet. Add colors before creating variants.</p>
                </div>
            }
        </div>
    </div>

    <!-- Variant Management Section -->
    <div class="card">
        <div class="card-header">
            <div class="d-flex justify-content-between align-items-center">
                <h5 class="mb-0">Variant Management</h5>
                @if (isAdmin && Model.Colors?.Any() == true)
                {
                    <button type="button" class="btn btn-success" data-bs-toggle="modal" data-bs-target="#addVariantModal">
                        <i class="bi bi-plus"></i> Generate Variants
                    </button>
                }
                else if (isAdmin)
                {
                    <button type="button" class="btn btn-success" disabled title="Add colors first">
                        <i class="bi bi-plus"></i> Generate Variants
                    </button>
                }
            </div>
        </div>
        <div class="card-body">
            @if (Model.PhoneVariants?.Any() == true)
            {
                <table class="table table-striped table-hover">
                    <thead class="table-dark">
                        <tr>
                            <th>SKU</th>
                            <th>Color</th>
                            <th>Price</th>
                            <th>Stock</th>
                            <th>Status</th>
                            <th>Attributes</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var variant in Model.PhoneVariants)
                        {
                            <tr>
                                <td>@variant.Sku</td>
                                <td>@Model.GetColorName(variant.ColorId)</td>
                                <td>$@variant.Price.ToString("N2")</td>
                                <td>@variant.Stock</td>
                                <td>
                                    <span class="badge @(variant.Status == 1 ? "bg-success" : "bg-danger")">
                                        @(variant.Status == 1 ? "Active" : "Inactive")
                                    </span>
                                </td>
                                <td>
                                    @if (variant.VariantAttributes?.Any() == true)
                                    {
                                        <div class="d-flex flex-wrap gap-1">
                                            @foreach (var attr in variant.VariantAttributes)
                                            {
                                                <span class="badge bg-secondary small">
                                                    @attr.AttributeName: @attr.AttributeValue
                                                </span>
                                            }
                                        </div>
                                    }
                                    else
                                    {
                                        <span class="text-muted small">No attributes</span>
                                    }
                                </td>
                                <td>
                                    @if (isAdmin)
                                    {
                                        <div class="btn-group" role="group">
                                            <button type="button" class="btn btn-sm btn-outline-primary" 
                                                    onclick="editVariant(@variant.VariantId, @variant.Price, @variant.Stock, '@variant.Sku')"
                                                    title="Edit Variant">
                                                <i class="bi bi-pencil"></i>
                                            </button>
                                            <button type="button" class="btn btn-sm btn-outline-danger" 
                                                    onclick="deleteVariant(@variant.VariantId, '@variant.Sku')"
                                                    title="Delete Variant">
                                                <i class="bi bi-trash"></i>
                                            </button>
                                        </div>
                                    }
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
            else
            {
                <div class="text-center py-4 text-muted">
                    <i class="bi bi-box" style="font-size: 2rem;"></i>
                    <p class="mt-2">No variants created yet. Generate variants from colors and attributes.</p>
                </div>
            }
        </div>
    </div>
</div>

<!-- Add Color Modal -->
<div class="modal fade" id="addColorModal" tabindex="-1" aria-labelledby="addColorModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addColorModalLabel">Add New Color</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form asp-page-handler="AddColor" method="post">
                <div class="modal-body">
                    <input type="hidden" name="PhoneId" value="@ViewContext.RouteData.Values["id"]" />
                    @Html.AntiForgeryToken()
                    
                    <!-- Debug info -->
                    <div class="alert alert-info small">
                        <strong>Debug:</strong> 
                        Route ID: @ViewContext.RouteData.Values["id"] | 
                        Model PhoneId: @Model.PhoneId | 
                        Phone.PhoneId: @Model.Phone?.PhoneId
                    </div>
                    
                    <div class="mb-3">
                        <label for="colorName" class="form-label">Color Name</label>
                        <input type="text" class="form-control" id="colorName" name="ColorName" required />
                    </div>
                    
                    <div class="mb-3">
                        <label for="imageUrl" class="form-label">Image URL</label>
                        <input type="url" class="form-control" id="imageUrl" name="ImageUrl" placeholder="https://example.com/image.jpg" required />
                        <div class="form-text">Enter a valid image URL for the color representation</div>
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Image Preview</label>
                        <div class="border rounded p-3 text-center">
                            <img id="imagePreview" src="" alt="Preview" style="max-width: 100%; max-height: 200px; display: none;" />
                            <div id="imagePreviewPlaceholder" class="text-muted">
                                <i class="bi bi-image" style="font-size: 2rem;"></i>
                                <p>Image preview will appear here</p>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">Add Color</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Add Variant Modal -->
<div class="modal fade" id="addVariantModal" tabindex="-1" aria-labelledby="addVariantModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addVariantModalLabel">Generate Variants</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form asp-page-handler="GenerateVariants" method="post">
                <div class="modal-body">
                    <input type="hidden" name="PhoneId" value="@ViewContext.RouteData.Values["id"]" />
                    
                    <div class="alert alert-info">
                        <i class="bi bi-info-circle"></i>
                        Variants will be automatically generated based on selected combinations of colors and attributes.
                    </div>

                    <!-- Colors Selection -->
                    <div class="mb-4">
                        <h6>Select Colors:</h6>
                        @if (Model.Colors?.Any() == true)
                        {
                            <div class="row">
                                @foreach (var color in Model.Colors)
                                {
                                    <div class="col-md-4 mb-2">
                                        <div class="form-check">
                                            <input class="form-check-input" type="checkbox" name="SelectedColors" value="@color.ColorId" id="color_@color.ColorId" />
                                            <label class="form-check-label" for="color_@color.ColorId">
                                                <img src="@color.ImageUrl" alt="@color.ColorName" style="width: 30px; height: 30px; object-fit: cover; border-radius: 50%;" class="me-2" />
                                                @color.ColorName
                                            </label>
                                        </div>
                                    </div>
                                }
                            </div>
                        }
                    </div>

                    <!-- Variant Attributes Selection -->
                    <div class="mb-4">
                        <h6>Select Variant Attributes:</h6>
                        @if (Model.VariantAttributes?.Any() == true)
                        {
                            @foreach (var variantAttr in Model.VariantAttributes)
                            {
                                <div class="mb-3">
                                    <div class="form-check">
                                        <input class="form-check-input attribute-checkbox" type="checkbox" id="attr_@variantAttr.VariantAttributeId" />
                                        <input type="hidden" class="attribute-id" value="@variantAttr.VariantAttributeId" />
                                        <label class="form-check-label fw-bold" for="attr_@variantAttr.VariantAttributeId">
                                            @variantAttr.Name
                                        </label>
                                    </div>
                                    
                                    <div class="ms-4 mt-2" id="values_@variantAttr.VariantAttributeId" style="display: none;">
                                        @if (variantAttr.Values?.Any() == true)
                                        {
                                            <div class="row">
                                                @foreach (var value in variantAttr.Values)
                                                {
                                                    <div class="col-md-6">
                                                        <div class="form-check">
                                                            <input class="form-check-input" type="checkbox" name="SelectedAttributeValues" value="@value.ValueId" id="value_@value.ValueId" />
                                                            <label class="form-check-label" for="value_@value.ValueId">
                                                                @value.Value
                                                            </label>
                                                        </div>
                                                    </div>
                                                }
                                            </div>
                                        }
                                    </div>
                                </div>
                            }
                        }
                        else
                        {
                            <p class="text-muted">No variant attributes available. <a href="/Admin/VariantAttribute">Create variant attributes first</a>.</p>
                        }
                    </div>

                    <!-- Base Price -->
                    <div class="mb-3">
                        <label for="basePrice" class="form-label">Base Price</label>
                        <input type="number" class="form-control" id="basePrice" name="BasePrice" value="@Model.Phone.BasePrice" step="0.01" min="0" required />
                        <div class="form-text">This will be the starting price for all variants</div>
                    </div>

                    <!-- Stock -->
                    <div class="mb-3">
                        <label for="baseStock" class="form-label">Initial Stock (per variant)</label>
                        <input type="number" class="form-control" id="baseStock" name="BaseStock" value="100" min="0" required />
                    </div>

                    <!-- Variant Count Preview -->
                    <div class="alert alert-secondary">
                        <strong>Estimated variants to be created: </strong><span id="variantCount">0</span>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-success" onclick="debugFormSubmission()">Generate Variants</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Edit Variant Modal -->
<div class="modal fade" id="editVariantModal" tabindex="-1" aria-labelledby="editVariantModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editVariantModalLabel">Edit Variant</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form asp-page-handler="EditVariant" method="post">
                <div class="modal-body">
                    <input type="hidden" id="editVariantId" name="EditVariantId" />
                    @Html.AntiForgeryToken()
                    
                    <!-- Variant Info Display -->
                    <div class="alert alert-info">
                        <strong>Editing Variant:</strong> <span id="editVariantSku"></span>
                    </div>
                    
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="editPrice" class="form-label">Price ($)</label>
                                <input type="number" class="form-control" id="editPrice" name="EditPrice" 
                                       step="0.01" min="0.01" required />
                                <div class="form-text">Enter the new price for this variant</div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="editStock" class="form-label">Stock Quantity</label>
                                <input type="number" class="form-control" id="editStock" name="EditStock" 
                                       min="0" required />
                                <div class="form-text">Enter the available stock quantity</div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">
                        <i class="bi bi-check-lg"></i> Update Variant
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Basic test
        console.log('=== JavaScript is loading ===');
        
        // Test jQuery
        $(document).ready(function() {
            console.log('=== jQuery is working ===');
        });
        
        // Debug form submission
        document.addEventListener('DOMContentLoaded', function() {
            console.log('=== DOMContentLoaded fired ===');
            
            const colorForm = document.querySelector('#addColorModal form');
            const submitBtn = document.querySelector('#addColorModal button[type="submit"]');
            const modal = document.getElementById('addColorModal');
            const addColorButton = document.querySelector('button[data-bs-target="#addColorModal"]');
            
            console.log('Form found:', colorForm);
            console.log('Submit button found:', submitBtn);
            console.log('Modal found:', modal);
            console.log('Add Color Button found:', addColorButton);
            
            // Test button click
            if (addColorButton) {
                addColorButton.addEventListener('click', function() {
                    console.log('=== Add Color button clicked ===');
                });
            }
            
            // Debug modal events
            if (modal) {
                modal.addEventListener('show.bs.modal', function() {
                    console.log('=== Modal showing ===');
                });
                
                modal.addEventListener('shown.bs.modal', function() {
                    console.log('=== Modal shown ===');
                });
                
                modal.addEventListener('hide.bs.modal', function() {
                    console.log('=== Modal hiding ===');
                });
            }
            
            if (colorForm) {
                colorForm.addEventListener('submit', function(e) {
                    console.log('=== Form submit event triggered ===');
                    console.log('Form data:', new FormData(this));
                    
                    // Check required fields
                    const colorName = document.getElementById('colorName').value;
                    const imageUrl = document.getElementById('imageUrl').value;
                    
                    console.log('Color Name:', colorName);
                    console.log('Image URL:', imageUrl);
                    
                    if (!colorName || !imageUrl) {
                        console.log('=== Form validation failed ===');
                        e.preventDefault();
                        alert('Please fill in all required fields');
                        return false;
                    }
                    
                    console.log('=== Form validation passed, submitting... ===');
                    // Show loading state
                    submitBtn.disabled = true;
                    submitBtn.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Adding...';
                });
            }
            
            if (submitBtn) {
                submitBtn.addEventListener('click', function(e) {
                    console.log('=== Submit button clicked ===');
                });
            }
        });

        // Image preview functionality
        document.getElementById('imageUrl').addEventListener('input', function() {
            const url = this.value;
            const preview = document.getElementById('imagePreview');
            const placeholder = document.getElementById('imagePreviewPlaceholder');
            
            if (url && url.trim() !== '') {
                preview.src = url;
                preview.style.display = 'block';
                placeholder.style.display = 'none';
                
                preview.onerror = function() {
                    preview.style.display = 'none';
                    placeholder.style.display = 'block';
                };
            } else {
                preview.style.display = 'none';
                placeholder.style.display = 'block';
            }
        });

        // Attribute checkbox functionality
        document.querySelectorAll('.attribute-checkbox').forEach(function(checkbox) {
            checkbox.addEventListener('change', function() {
                const attributeId = this.parentElement.querySelector('.attribute-id').value;
                const valuesDiv = document.getElementById('values_' + attributeId);
                
                if (this.checked) {
                    valuesDiv.style.display = 'block';
                } else {
                    valuesDiv.style.display = 'none';
                    // Uncheck all values when attribute is unchecked
                    valuesDiv.querySelectorAll('input[type="checkbox"]').forEach(function(valueCheckbox) {
                        valueCheckbox.checked = false;
                    });
                }
                
                updateVariantCount();
            });
        });

        // Update variant count
        function updateVariantCount() {
            const selectedColors = document.querySelectorAll('input[name="SelectedColors"]:checked').length;
            const selectedValues = document.querySelectorAll('input[name="SelectedAttributeValues"]:checked');
            
            console.log('Selected colors:', selectedColors);
            console.log('Selected attribute values:', selectedValues.length);
            
            // Calculate combinations using Cartesian product
            let variantCount = selectedColors;
            
            if (selectedValues.length > 0) {
                // Group selected values by attribute
                const attributeGroups = {};
                selectedValues.forEach(function(checkbox) {
                    const valueDiv = checkbox.closest('[id^="values_"]');
                    const attributeId = valueDiv.id.replace('values_', '');
                    
                    if (!attributeGroups[attributeId]) {
                        attributeGroups[attributeId] = 0;
                    }
                    attributeGroups[attributeId]++;
                });
                
                console.log('Attribute groups:', attributeGroups);
                
                // Calculate Cartesian product: multiply number of values for each attribute
                let attributeCombinations = 1;
                for (const attributeId in attributeGroups) {
                    attributeCombinations *= attributeGroups[attributeId];
                }
                
                console.log('Attribute combinations:', attributeCombinations);
                variantCount = selectedColors * attributeCombinations;
            }
            
            console.log('Total variant count:', variantCount);
            document.getElementById('variantCount').textContent = variantCount || 0;
        }

        // Add event listeners for color and value checkboxes
        document.querySelectorAll('input[name="SelectedColors"], input[name="SelectedAttributeValues"]').forEach(function(checkbox) {
            checkbox.addEventListener('change', updateVariantCount);
        });

        // Debug authentication function
        function debugAuth() {
            fetch('?handler=DebugAuth', {
                method: 'GET',
                headers: {
                    'X-Requested-With': 'XMLHttpRequest'
                }
            })
            .then(response => response.json())
            .then(data => {
                console.log('=== DEBUG AUTH INFO ===', data);
                alert(`Authentication Debug Info:
                
IsAuthenticated: ${data.isAuthenticated}
Name: ${data.name || 'N/A'}
Role: ${data.role || 'N/A'}
Token Exists: ${data.tokenExists}
Token Length: ${data.tokenLength}

Claims Count: ${data.claims.length}

Check browser console for detailed claims information.`);
            })
            .catch(error => {
                console.error('Error fetching debug info:', error);
                alert('Error fetching debug info. Check console for details.');
            });
        }

        // Test API connection function
        function testApi() {
            console.log('=== TESTING API CONNECTION ===');
            fetch('?handler=TestApi', {
                method: 'GET',
                headers: {
                    'X-Requested-With': 'XMLHttpRequest'
                }
            })
            .then(response => response.json())
            .then(data => {
                console.log('=== API TEST RESULT ===', data);
                
                const message = data.success 
                    ? `API Test SUCCESSFUL!
                    
Status: ${data.statusCode}
Base URL: ${data.baseUrl}
Token Exists: ${data.tokenExists}

Response: ${data.response}

Check console for detailed logs.`
                    : `API Test FAILED!
                    
Status: ${data.statusCode || 'Unknown'}
Base URL: ${data.baseUrl || 'Unknown'}
Token Exists: ${data.tokenExists}
Error: ${data.error || data.response}

Check console and server logs for details.`;
                
                alert(message);
            })
            .catch(error => {
                console.error('Error testing API:', error);
                alert('Error testing API connection. Check console for details.');
            });
        }

        // Check phone existence function
        function checkPhone(phoneId) {
            console.log('=== CHECKING PHONE EXISTENCE ===', phoneId);
            fetch(`?handler=CheckPhone&phoneId=${phoneId}`, {
                method: 'GET',
                headers: {
                    'X-Requested-With': 'XMLHttpRequest'
                }
            })
            .then(response => response.json())
            .then(data => {
                console.log('=== PHONE CHECK RESULT ===', data);
                
                const message = data.exists 
                    ? `Phone EXISTS in Database!
                    
Phone ID: ${phoneId}
Status: ${data.statusCode}

Phone Data: ${data.phone}

This phone can be used for adding colors.`
                    : `Phone DOES NOT EXIST in Database!
                    
Phone ID: ${phoneId}
Status: ${data.statusCode}
Error: ${data.error}

This explains the Foreign Key constraint error.
You need to create this phone first or use a different Phone ID.`;
                
                alert(message);
            })
            .catch(error => {
                console.error('Error checking phone:', error);
                alert('Error checking phone existence. Check console for details.');
            });
        }

        // Delete color function
        function deleteColor(colorId) {
            if (confirm('Are you sure you want to delete this color?')) {
                const form = document.createElement('form');
                form.method = 'POST';
                form.action = '';
                
                const handlerInput = document.createElement('input');
                handlerInput.type = 'hidden';
                handlerInput.name = '__RequestVerificationToken';
                handlerInput.value = document.querySelector('input[name="__RequestVerificationToken"]').value;
                
                const colorIdInput = document.createElement('input');
                colorIdInput.type = 'hidden';
                colorIdInput.name = 'colorId';
                colorIdInput.value = colorId;
                
                const phoneIdInput = document.createElement('input');
                phoneIdInput.type = 'hidden';
                phoneIdInput.name = 'PhoneId';
                phoneIdInput.value = '@Model.Phone.PhoneId';
                
                form.appendChild(handlerInput);
                form.appendChild(colorIdInput);
                form.appendChild(phoneIdInput);
                
                // Set the handler
                form.action = '?handler=DeleteColor';
                
                document.body.appendChild(form);
                form.submit();
            }
        }

        // Debug form submission function
        function debugFormSubmission() {
            console.log('=== DEBUG FORM SUBMISSION ===');
            
            const form = document.querySelector('#addVariantModal form');
            const formData = new FormData(form);
            
            console.log('Form data entries:');
            for (let [key, value] of formData.entries()) {
                console.log(`${key}: ${value}`);
            }
            
            // Check selected colors
            const selectedColors = document.querySelectorAll('input[name="SelectedColors"]:checked');
            console.log('Selected Colors:', Array.from(selectedColors).map(input => input.value));
            
            // Check selected attribute values
            const selectedValues = document.querySelectorAll('input[name="SelectedAttributeValues"]:checked');
            console.log('Selected Attribute Values:', Array.from(selectedValues).map(input => input.value));
            
            // Check base price and stock
            const basePrice = document.getElementById('basePrice').value;
            const baseStock = document.getElementById('baseStock').value;
            console.log('Base Price:', basePrice);
            console.log('Base Stock:', baseStock);
            
            return true; // Allow form submission to continue
        }

        // Test variant attribute mapping function
        function testMapping() {
            console.log('=== TESTING VARIANT ATTRIBUTE MAPPING ===');
            fetch('?handler=TestMapping', {
                method: 'GET',
                headers: {
                    'X-Requested-With': 'XMLHttpRequest'
                }
            })
            .then(response => response.json())
            .then(data => {
                console.log('=== MAPPING TEST RESULT ===', data);
                
                if (data.success) {
                    const message = `Variant Attribute Mapping Test Results:
                    
✅ Variants Check: ${data.variantsCheck.status}
   Content: ${data.variantsCheck.content}

✅ Values Check: ${data.valuesCheck.status}
   Content: ${data.valuesCheck.content}

✅ Mapping Test: ${data.mappingTest.status}
   Content: ${data.mappingTest.content}

✅ Attributes Check: ${data.attributesCheck.status}
   Content: ${data.attributesCheck.content}

Check console for detailed logs.`;
                    
                    alert(message);
                } else {
                    alert(`Mapping test FAILED!
                    
Error: ${data.error}

Check console and server logs for details.`);
                }
            })
            .catch(error => {
                console.error('Error testing mapping:', error);
                alert('Error testing mapping. Check console for details.');
            });
        }

        // Debug attributes function
        function debugAttributes() {
            console.log('=== COMPREHENSIVE VARIANT ATTRIBUTES DEBUG ===');
            fetch('?handler=DebugVariantAttributes', {
                method: 'GET',
                headers: {
                    'X-Requested-With': 'XMLHttpRequest'
                }
            })
            .then(response => response.json())
            .then(data => {
                console.log('=== COMPREHENSIVE DEBUG RESULT ===', data);
                
                if (data.step7_Summary) {
                    const message = `🔍 Comprehensive VariantAttributes Debug:

📍 Step 1 - API Base URL: ${data.step1_BaseUrl}
🔐 Step 2 - Token Exists: ${data.step2_TokenExists}

📊 Step 3 - OLD Endpoint (/api/VariantAttribute):
   Status: ${data.step3_OldEndpoint?.status || data.step3_OldEndpoint?.error}
   Content Length: ${data.step3_OldEndpoint?.contentLength || 'N/A'}

📊 Step 4 - NEW Endpoint (/api/VariantAttribute/with-values):
   Status: ${data.step4_NewEndpoint?.status || data.step4_NewEndpoint?.error}
   Content Length: ${data.step4_NewEndpoint?.contentLength || 'N/A'}

📋 Step 5 - Current Model:
   Attributes Count: ${data.step5_CurrentModel?.count || 0}

📝 Step 6 - Selected Values: ${data.step6_SelectedValues?.length || 0}

🎯 SUMMARY: ${data.step7_Summary}

Check console for complete data structure and raw API responses.`;
                    
                    alert(message);
                } else {
                    alert(`Debug FAILED!
                    
Error: ${data.error}

Check console and server logs for details.`);
                }
            })
            .catch(error => {
                console.error('Error debugging attributes:', error);
                alert('Error debugging attributes. Check console for details.');
            });
        }

        // Simple check function
        function simpleCheck() {
            console.log('=== SIMPLE CHECK FUNCTION CALLED ===');
            fetch('?handler=SimpleCheck', {
                method: 'GET',
                headers: {
                    'X-Requested-With': 'XMLHttpRequest'
                }
            })
            .then(response => response.json())
            .then(data => {
                console.log('=== SIMPLE CHECK RESULT ===', data);
                
                if (data.diagnosis) {
                    const message = `🔍 Quick Database Check:

${data.diagnosis}

📊 Details:
   - VariantAttributes Count: ${data.attributeCount || 0}
   - Has Values: ${data.hasValues ? 'Yes' : 'No'}

🔧 Next Steps:
${data.attributeCount === 0 ? 
    '1. Go to /Admin/VariantAttribute to create attributes\n2. Add values to each attribute\n3. Come back and try generating variants' : 
    !data.hasValues ? 
        '1. Check existing VariantAttributes have values\n2. Go to /Admin/VariantAttribute to add values' :
        '1. Try generating variants now\n2. If still fails, check the Full Debug'
}

Check console for raw API responses.`;
                    
                    alert(message);
                } else {
                    alert(`Quick Check FAILED!
                    
Error: ${data.error}
Diagnosis: ${data.diagnosis || 'Unknown error'}

Check console and server logs for details.`);
                }
            })
            .catch(error => {
                console.error('Error in simple check:', error);
                alert('Error in quick check. Check console for details.');
            });
        }

        // Check values function
        function checkValues() {
            console.log('=== CHECK VALUES FUNCTION CALLED ===');
            fetch('?handler=CheckValues', {
                method: 'GET',
                headers: {
                    'X-Requested-With': 'XMLHttpRequest'
                }
            })
            .then(response => response.json())
            .then(data => {
                console.log('=== CHECK VALUES RESULT ===', data);
                
                if (data.success) {
                    const storageValues = data.storageValues || [];
                    const allValues = data.allValues || [];
                    
                    const message = `📋 Variant Attribute Values Check:

🎯 Found ${data.attributeCount} attributes

📦 Storage Values:
${storageValues.length > 0 ? storageValues.join('\n') : 'No storage values found'}

📋 All Values:
${allValues.slice(0, 10).join('\n')}${allValues.length > 10 ? '\n... and ' + (allValues.length - 10) + ' more' : ''}

🔍 Looking for 256GB: ${storageValues.some(v => v.includes('256')) ? '✅ FOUND' : '❌ NOT FOUND'}

Check console for complete data structure.`;
                    
                    alert(message);
                } else {
                    alert(`Values Check FAILED!
                    
Error: ${data.error}
Status: ${data.status || 'Unknown'}

Check console and server logs for details.`);
                }
            })
            .catch(error => {
                console.error('Error in check values:', error);
                alert('Error in check values. Check console for details.');
            });
        }

        // Edit variant function
        function editVariant(variantId, price, stock, sku) {
            console.log('=== EDITING VARIANT ===', variantId, price, stock, sku);
            
            // Populate modal with current data
            document.getElementById('editVariantId').value = variantId;
            document.getElementById('editPrice').value = price;
            document.getElementById('editStock').value = stock;
            document.getElementById('editVariantSku').textContent = sku;
            
            // Show the modal
            const modal = new bootstrap.Modal(document.getElementById('editVariantModal'));
            modal.show();
        }

        // Delete variant function
        function deleteVariant(variantId, sku) {
            if (confirm(`Are you sure you want to delete variant "${sku}"?`)) {
                const form = document.createElement('form');
                form.method = 'POST';
                form.action = '?handler=DeleteVariant';
                
                const handlerInput = document.createElement('input');
                handlerInput.type = 'hidden';
                handlerInput.name = '__RequestVerificationToken';
                handlerInput.value = document.querySelector('input[name="__RequestVerificationToken"]').value;
                
                const variantIdInput = document.createElement('input');
                variantIdInput.type = 'hidden';
                variantIdInput.name = 'variantId';
                variantIdInput.value = variantId;
                
                form.appendChild(handlerInput);
                form.appendChild(variantIdInput);
                
                document.body.appendChild(form);
                form.submit();
            }
        }
    </script>
} 