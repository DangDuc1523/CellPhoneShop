@page
@model CellPhoneShop.Web.Pages.Order.IndexModel
@{
    ViewData["Title"] = "Order Management";
}

<div class="container-fluid mt-4">
    @if (!string.IsNullOrEmpty(Model.ErrorMessage))
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            @Model.ErrorMessage
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    @if (!string.IsNullOrEmpty(Model.SuccessMessage))
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            @Model.SuccessMessage
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    <!-- Search & Filter Form -->
    <div class="card mb-4">
         <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
            <h2 class="card-title mb-0">Phone List</h2>
            </div>
        <div class="card-body">
            <form method="get" class="row g-3 align-items-end">
                <div class="col-md-3">
                    <label for="searchTerm" class="form-label">Search Orders</label>
                    <input type="text" class="form-control" id="searchTerm" name="SearchTerm"
                           value="@Model.SearchTerm" placeholder="Search by order ID, customer, etc...">
                </div>
                <div class="col-md-2">
                    <label for="status" class="form-label">Status</label>
                    <select class="form-select" id="status" name="Status">
                        <option value="">All Statuses</option>
                        @foreach (var status in Model.OrderStatusOptions)
                        {
                            <option value="@status.Key" selected="@(Model.Status == status.Key)">@status.Value</option>
                        }
                    </select>
                </div>
                <div class="col-md-2">
                    <label for="sortBy" class="form-label">Sort By</label>
                    <select class="form-select" id="sortBy" name="SortBy">
                        <option value="OrderDate" selected="@(Model.SortBy == "OrderDate")">Order Date</option>
                        <option value="TotalAmount" selected="@(Model.SortBy == "TotalAmount")">Total Amount</option>
                        <option value="Status" selected="@(Model.SortBy == "Status")">Status</option>
                    </select>
                </div>
                <div class="col-md-2">
                    <label for="sortDirection" class="form-label">Sort Direction</label>
                    <select class="form-select" id="sortDirection" name="SortDirection">
                        <option value="desc" selected="@(Model.SortDirection == "desc")">Descending</option>
                        <option value="asc" selected="@(Model.SortDirection == "asc")">Ascending</option>
                    </select>
                </div>
                <div class="col-md-1">
                    <button type="submit" class="btn btn-primary w-100">Search</button>
                </div>
                <div class="col-md-2">
                    <a href="@Url.Page("/Order/Index")" class="btn btn-secondary w-100">Clear</a>
                </div>
            </form>
        </div>
    </div>

    <div class="table-responsive">
        <table class="table table-hover">
            <thead class="table-dark">
                <tr>
                    <th width="10%">Order ID</th>
                    <th width="20%">Customer</th>
                    <th width="15%">Total</th>
                    <th width="12%">Status</th>
                    <th width="15%">Order Date</th>
                    <th width="18%">Actions</th>
                </tr>
            </thead>
            <tbody id="ordersTableBody">
                @foreach (var order in Model.OrdersResult.Items ?? Enumerable.Empty<CellPhoneShop.Web.DTOs.Order.OrderDtos.OrderDto>())
                {
                    <tr>
                        <td>@order.OrderId</td>
                        <td>@order.UserId</td>
                        <td>@order.TotalAmount</td>
                        <td>@Model.GetStatusDisplayName(order.Status)</td>
                        <td>@order.OrderDate</td>
                        <td>
                            <form method="post" asp-page-handler="UpdateStatus" class="d-inline">
                                <select name="newStatus" class="form-select form-select-sm d-inline-block w-auto"
                                        onchange="this.form.submit()" @(order.Status == 3 || order.Status == 4 ? "disabled title='Cannot change status for Delivered or Cancelled orders'" : "")>
                                    @foreach (var status in Model.OrderStatusOptions)
                                    {
                                        <option value="@status.Key"
                                                selected="@(status.Key == order.Status)">
                                            @status.Value
                                        </option>
                                    }
                                </select>
                                <input type="hidden" name="orderId" value="@order.OrderId" />
                                <input type="hidden" name="SearchTerm" value="@Model.SearchTerm" />
                                <button type="submit" style="display:none;">Update</button>
                                @Html.AntiForgeryToken()
                            </form>
                            <form method="post" class="d-inline" onsubmit="return confirm('Are you sure you want to delete this order?');">
                                <input type="hidden" name="id" value="@order.OrderId" />
                                <input type="hidden" name="SearchTerm" value="@Model.SearchTerm" />
                                <button type="submit" asp-page-handler="Delete" class="btn btn-danger btn-sm">
                                    <i class="bi bi-trash"></i> Delete
                                </button>
                                @Html.AntiForgeryToken()
                            </form>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    @if (Model.TotalPages > 1)
    {
        <nav aria-label="Page navigation" class="mt-4">
            <div class="d-flex justify-content-between align-items-center">
                <div class="text-muted">
                    Showing @((Model.CurrentPage - 1) * Model.PageSize + 1) to @(Math.Min(Model.CurrentPage * Model.PageSize, Model.TotalItems)) of @Model.TotalItems items
                </div>
                <ul class="pagination mb-0">
                    <li class="page-item @(Model.HasPreviousPage ? "" : "disabled")">
                        <a class="page-link" href="@Model.GetPageUrl(Model.CurrentPage - 1)" aria-label="Previous">
                            <span aria-hidden="true">&laquo;</span>
                        </a>
                    </li>
                    @{
                        const int maxVisiblePages = 5;
                        var startPage = Math.Max(1, Model.CurrentPage - maxVisiblePages / 2);
                        var endPage = Math.Min(Model.TotalPages, startPage + maxVisiblePages - 1);
                        startPage = Math.Max(1, endPage - maxVisiblePages + 1);
                    }
                    @if (startPage > 1)
                    {
                        <li class="page-item">
                            <a class="page-link" href="@Model.GetPageUrl(1)">1</a>
                        </li>
                        @if (startPage > 2)
                        {
                            <li class="page-item disabled">
                                <span class="page-link">...</span>
                            </li>
                        }
                    }
                    @for (var i = startPage; i <= endPage; i++)
                    {
                        <li class="page-item @(i == Model.CurrentPage ? "active" : "")">
                            <a class="page-link" href="@Model.GetPageUrl(i)">@i</a>
                        </li>
                    }
                    @if (endPage < Model.TotalPages)
                    {
                        @if (endPage < Model.TotalPages - 1)
                        {
                            <li class="page-item disabled">
                                <span class="page-link">...</span>
                            </li>
                        }
                        <li class="page-item">
                            <a class="page-link" href="@Model.GetPageUrl(Model.TotalPages)">@Model.TotalPages</a>
                        </li>
                    }
                    <li class="page-item @(Model.HasNextPage ? "" : "disabled")">
                        <a class="page-link" href="@Model.GetPageUrl(Model.CurrentPage + 1)" aria-label="Next">
                            <span aria-hidden="true">&raquo;</span>
                        </a>
                    </li>
                </ul>
            </div>
        </nav>
    }

    <!-- Summary Stats -->
    <div class="row mt-4">
        <div class="col-md-12">
            <div class="card bg-light">
                <div class="card-body">
                    <div class="row text-center">
                        <div class="col-md-2">
                            <h5 class="text-warning" id="pendingCount">0</h5>
                            <small>Pending</small>
                        </div>
                        <div class="col-md-2">
                            <h5 class="text-info" id="processingCount">0</h5>
                            <small>Processing</small>
                        </div>
                        <div class="col-md-2">
                            <h5 class="text-primary" id="shippedCount">0</h5>
                            <small>Shipped</small>
                        </div>
                        <div class="col-md-2">
                            <h5 class="text-success" id="deliveredCount">0</h5>
                            <small>Delivered</small>
                        </div>
                        <div class="col-md-2">
                            <h5 class="text-danger" id="cancelledCount">0</h5>
                            <small>Cancelled</small>
                        </div>
                        <div class="col-md-2">
                            <h5 class="text-dark" id="totalCount">0</h5>
                            <small>Total Orders</small>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.7.2/font/bootstrap-icons.css">
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Get orders data from the model (injected as JSON)
            const orders = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.Orders));

            // Calculate counts for each status
            const counts = {
                pending: orders.filter(o => o.status === 0).length,
                processing: orders.filter(o => o.status === 1).length,
                shipped: orders.filter(o => o.status === 2).length,
                delivered: orders.filter(o => o.status === 3).length,
                cancelled: orders.filter(o => o.status === 4).length,
                total: orders.length
            };

            // Update the DOM with counts
            document.getElementById('pendingCount').textContent = counts.pending;
            document.getElementById('processingCount').textContent = counts.processing;
            document.getElementById('shippedCount').textContent = counts.shipped;
            document.getElementById('deliveredCount').textContent = counts.delivered;
            document.getElementById('cancelledCount').textContent = counts.cancelled;
            document.getElementById('totalCount').textContent = counts.total;
        });
    </script>
}